######################
import Info_sys
import My_sqlite3     as        sql3
from   common         import    BOT, PAYMENT_TOKEN, BUTTON_BACK, ty, dt, pl, time
#File common is private, create his.
from   My_sqlite3     import    session_id_admins
from   clean_DB       import    clear_admins, delete_inactive_accounts
######################
import threading
import json 



#Function and variables without use telebot:
def check_time():
  global session_id_admins
  while True:
    if dt.now().hour == 23 and dt.now().minute == 39: 
        clear_admins()
        delete_inactive_accounts()
        session_id_admins = [0]
        time.sleep(60)
    else:
        time.sleep(20)
def check_admins(id):
    if id in session_id_admins:
        return True
    else:
        return False
    #RUN IN THE END OF PROGRAM
HELLO_TEXT = """
–¢–≤–æ–π –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫ –≤ –º–∏—Ä–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è!
–≠—Ç–æ—Ç –±–æ—Ç –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç—Å—è –ø–æ–º–æ—á—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –Ω–∞—á–∞–ª—å–Ω–æ–º –æ—Å–≤–æ–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è   :) 
‚Ä¢üìö–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏: –ò–∑—É—á–∞–π —Å—Ç–∞—Ç—å–∏ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã (Type/Java Script; Python).
‚Ä¢üí°–ü—Ä–æ–µ–∫—Ç—ã: –£–∑–Ω–∞–π –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏ –ø–æ—á–µ—Ä–ø–Ω–∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö, –ø–æ–º–æ–≥–∞–π —Ä–µ—à–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∏ –∏—Å–ø—Ä–∞–≤–ª—è–π —Å–≤–æ–∏!
‚Ä¢üõí–ú–∞–≥–∞–∑–∏–Ω: –ü–æ–∫—É–ø–∞–π SKM –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤..."""
FIB_TEXT = """import timeit
def fibonacci_iterative(n):
    a, b = 0, 1
    for i in range(n):
        a, b = b, a + b
    return 0

# –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
elapsed_time_iterative = timeit.timeit(lambda: fibonacci_iterative(1_500_000), number=1)
print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time_iterative:.2f} —Å–µ–∫—É–Ω–¥")
f = input()

–°–∫–æ–ø–∏—Ä—É–π –∫–æ–¥ –∏ –ø—Ä–æ–≤–µ—Ä—å, –∑–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ç–≤–æ–π –ø–∫ —Å–º–æ–∂–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –ø–æ –ø–æ—Ä—è–¥–∫—É –ø–æ–ª—Ç–æ—Ä–∞–º–∏–ª–ª–∏–æ–Ω–∞ —Ä–∞–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –§–∏–±–æ–Ω–∞—á—á–∏!"""
LIST_COMMANDS = """
–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
1) /user_list
2) /admin_list"""
#MULTI_FUNCTION

#MENU AND IT'S MODULES

################################
KEY_MENU = ty.ReplyKeyboardMarkup(resize_keyboard=True) 
button_file = ty.KeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
button_login = ty.KeyboardButton("–ê–∫–∫–∞—É–Ω—Ç")
button_enter = ty.KeyboardButton("–ú–∞–≥–∞–∑–∏–Ω")
KEY_MENU.row(button_file, button_login)
KEY_MENU.add(button_enter)
###############################
def Menu(message):
    BOT.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=KEY_MENU)
################################
KEY_REG = ty.InlineKeyboardMarkup() 
button_deleted = ty.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="del")
button_state = ty.InlineKeyboardButton("–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="info")
button_login = ty.InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="reg")
button_enter = ty.InlineKeyboardButton("–í–æ–π—Ç–∏", callback_data="enter")
KEY_REG.row(button_enter, button_login)
KEY_REG.add(button_deleted)
KEY_REG.add(button_state)
################################
def Registration(message): 
    BOT.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏—è —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º:", reply_markup=KEY_REG)
################################
KEY_SHOP = ty.ReplyKeyboardMarkup(resize_keyboard=True)
button = ty.KeyboardButton(
text="–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=ty.WebAppInfo(url="https://slerrick.github.io/Telegram_Bot_webApp/"))
KEY_SHOP.add(button)
KEY_SHOP.add(BUTTON_BACK)
################################
def send_shop_price(message):
    BOT.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ(10 —Å–µ–∫—É–Ω–¥):", reply_markup=KEY_SHOP)
################################
KEY_CHOSEN = ty.ReplyKeyboardMarkup(resize_keyboard=True)
button_programm = ty.KeyboardButton("–ü—Ä–æ–≥—Ä–∞–º–º—ã")
button_learn = ty.KeyboardButton("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è")
button_hard = ty.KeyboardButton("–ñ–µ–ª–µ–∑–æ")
button_other = ty.KeyboardButton("–ü—Ä–æ—á–µ–µ")
KEY_CHOSEN.row(button_programm, button_learn)
KEY_CHOSEN.row(button_hard, button_other)
KEY_CHOSEN.add(BUTTON_BACK)
def payment(message):
    BOT.send_invoice(
        message.chat.id,
        title="SK_MONEYS",
        description="I'm rich",
        invoice_payload="invoice",
        provider_token=PAYMENT_TOKEN,
        currency="RUB",
        prices=[ty.LabeledPrice("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", 10000)],
        timeout=10)



#SEND FILES
def send_zip_file(zip_path: str, chat_id: int):
    try:
        with open(zip_path, "rb") as zip_file:
            BOT.send_document(chat_id, zip_file, caption="–í–æ—Ç –≤–∞—à ZIP-–∞—Ä—Ö–∏–≤!")
    except FileNotFoundError:
        BOT.send_message(chat_id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")



#LOGIN
def register_user(message, additional_arg):
    name_user = message.text
    sql3.Set_user_name(name_user)
    if len(name_user) >= 30:
        BOT.send_message(message.chat.id, "–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        return 0
    BOT.send_message(message.chat.id, "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å:")
    BOT.register_next_step_handler(message, pl(sql3.save_info_user, additional_arg=additional_arg))
    Info_sys.check_disk()



#Basic functions
@BOT.message_handler(commands=["start"])
def Main(message: ty.Message):
    BOT.send_message(message.chat.id, f"<b>–ü—Ä–∏–≤–µ—Ç, </b>{message.from_user.first_name}!{HELLO_TEXT}", parse_mode="html")
    Menu(message)

@BOT.message_handler(commands=["web"])
def Go_site(message: ty.Message):
    Buttons_to_web = ty.InlineKeyboardMarkup()
    Btn_web1 = ty.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç!", url="https://slerrick.github.io/WebSite3/")
    Btn_web2 = ty.InlineKeyboardButton("–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π...", callback_data="fib")  
    Buttons_to_web.row(Btn_web1, Btn_web2)
    BOT.send_message(message.chat.id, "–ê –≤–æ—Ç –∏ –º–æ–π –ø–µ—Ä–≤—ã–π —Å–∞–π—Ç üòä", reply_markup=Buttons_to_web)

@BOT.message_handler(content_types=["photo", "file"])
def Answer_to_file(chatick: ty.Message):
    BOT.reply_to(chatick, "–û—Ç–ª–∏—á–Ω—ã–π —Ñ–∞–π–ª! –ñ–∞–ª—å, —á—Ç–æ –ø–æ–∫–∞ —è –Ω–µ –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∏–º(")
####################################
@BOT.message_handler(content_types=[ty.SuccessfulPayment])
def Success(message: ty.Message):
    BOT.send_message(message.chat.id, f"Success: {message.successful_payment.order_info}")
@BOT.message_handler(content_types=["web_app_data"])
def json_web(message: ty.Message):
    res = json.loads(message.web_app_data.data)
    KEY_GET_SKM = ty.InlineKeyboardMarkup()
    button_money = ty.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –Ω–∞ —Å—á–µ—Ç", callback_data=str(res['amount']))
    KEY_GET_SKM.add(button_money)
    BOT.send_message(message.chat.id, f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {res['amount']}", reply_markup=KEY_GET_SKM)
####################################
@BOT.message_handler(commands=["admin"])
def Admin(message: ty.Message):
    if check_admins(message.from_user.id):
        try:
            BOT.send_message(message.chat.id, "–î–∞—Ä–æ–≤–∞!")
            BOT.send_message(message.chat.id, LIST_COMMANDS)
            print("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞")
            Info_sys.check_cpu()
            return 0
        except Exception as e:
            print(e)    
    BOT.send_message(message.chat.id, "–ù–µ –∞–¥–º–∏–Ω!")      

@BOT.message_handler(commands=["admin_list"])
def get_admin_list(message: ty.Message):
    if check_admins(message.from_user.id):
        BOT.send_message(message.chat.id, sql3.List_admins())

@BOT.message_handler(commands=["user_list"])
def get_user_list(message):
    if check_admins(message.from_user.id):
        BOT.send_message(message.chat.id, sql3.List_users())

@BOT.message_handler(content_types=["text"])
def on_click(message: ty.Message):
    if message.text == "–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª":
        BOT.send_message(message.chat.id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
        send_zip_file("./javascript-snakes-master.zip", message.chat.id)
    elif message.text == "–ê–∫–∫–∞—É–Ω—Ç":
        Registration(message)
    elif message.text == "–ù–∞–∑–∞–¥":
        Menu(message)
    elif message.text == "–ú–∞–≥–∞–∑–∏–Ω":
        send_shop_price(message)
    elif message.text == "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏":
        BOT.send_message(message.chat.id, "üëæ", reply_markup=KEY_CHOSEN)



@BOT.callback_query_handler(func=lambda call: True or call)
def Call_BOT(call: ty.CallbackQuery):
    messages = call.message
    user_id = messages.from_user.id
    if call.data == "fib":
        BOT.send_message(call.message.chat.id, FIB_TEXT)
        BOT.answer_callback_query(call.id)
        BOT.answer_callback_query(call.id, text="–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç.")
    if call.data == "reg":
        if sql3.Reg_user_first_check(call.message):
            BOT.send_message(call.message.chat.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç, –µ–≥–æ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")
            BOT.answer_callback_query(call.id, text="–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç.")
            return 0
        BOT.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        BOT.register_next_step_handler(messages, pl(register_user, additional_arg=user_id))
        BOT.answer_callback_query(call.id, text="–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç.")
    if call.data == "enter":
        BOT.send_message(messages.chat.id, "–í–≤–µ–¥–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–º—è, –∞ –ø–æ—Ç–æ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ø–∞—Ä–æ–ª—å.")
        BOT.register_next_step_handler(messages, pl(sql3.Enter_user, additional_arg=user_id))
        BOT.answer_callback_query(call.id, text="–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç.")
    if call.data == "del":
        BOT.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –î–ê/–ù–ï–¢, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å/–æ—Å—Ç–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç.")
        BOT.register_next_step_handler(call.message, pl(sql3.delete_account, additional_arg=user_id))
        BOT.answer_callback_query(call.id, text="–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç.")
    if call.data == "info":
        BOT.send_message(messages.chat.id, sql3.create_table(messages, user_id), parse_mode="html")
        BOT.answer_callback_query(call.id)
    if call.data in ["5200", "8000", "10000", "15000"]:
        sql3.set_skm_user(messages, int(call.data), user_id)

#END_PROGRAM
threading.Thread(target=check_time).start()
BOT.polling(non_stop=True, interval=3)